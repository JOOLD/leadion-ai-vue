import type { CustomPage } from '@clerk/types';
import type { Component } from 'vue';
import type { AddCustomPagesParams } from '../types';
export declare const useUserProfileCustomPages: () => {
    customPages: import("vue").Ref<{
        label: string;
        url?: string | undefined;
        mountIcon?: ((el: HTMLDivElement) => void) | undefined;
        unmountIcon?: ((el?: HTMLDivElement) => void) | undefined;
        mount?: ((el: HTMLDivElement) => void) | undefined;
        unmount?: ((el?: HTMLDivElement) => void) | undefined;
    }[], CustomPage[] | {
        label: string;
        url?: string | undefined;
        mountIcon?: ((el: HTMLDivElement) => void) | undefined;
        unmountIcon?: ((el?: HTMLDivElement) => void) | undefined;
        mount?: ((el: HTMLDivElement) => void) | undefined;
        unmount?: ((el?: HTMLDivElement) => void) | undefined;
    }[]>;
    customPagesPortals: import("vue").ComputedRef<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]>;
    addCustomPage: (params: AddCustomPagesParams) => void;
};
export declare const useOrganizationProfileCustomPages: () => {
    customPages: import("vue").Ref<{
        label: string;
        url?: string | undefined;
        mountIcon?: ((el: HTMLDivElement) => void) | undefined;
        unmountIcon?: ((el?: HTMLDivElement) => void) | undefined;
        mount?: ((el: HTMLDivElement) => void) | undefined;
        unmount?: ((el?: HTMLDivElement) => void) | undefined;
    }[], CustomPage[] | {
        label: string;
        url?: string | undefined;
        mountIcon?: ((el: HTMLDivElement) => void) | undefined;
        unmountIcon?: ((el?: HTMLDivElement) => void) | undefined;
        mount?: ((el: HTMLDivElement) => void) | undefined;
        unmount?: ((el?: HTMLDivElement) => void) | undefined;
    }[]>;
    customPagesPortals: import("vue").ComputedRef<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]>;
    addCustomPage: (params: AddCustomPagesParams) => void;
};
type UseCustomPagesParams = {
    LinkComponent: Component;
    PageComponent: Component;
    reorderItemsLabels: string[];
    componentName: string;
};
export declare const useCustomPages: (customPagesParams: UseCustomPagesParams) => {
    customPages: import("vue").Ref<{
        label: string;
        url?: string | undefined;
        mountIcon?: ((el: HTMLDivElement) => void) | undefined;
        unmountIcon?: ((el?: HTMLDivElement) => void) | undefined;
        mount?: ((el: HTMLDivElement) => void) | undefined;
        unmount?: ((el?: HTMLDivElement) => void) | undefined;
    }[], CustomPage[] | {
        label: string;
        url?: string | undefined;
        mountIcon?: ((el: HTMLDivElement) => void) | undefined;
        unmountIcon?: ((el?: HTMLDivElement) => void) | undefined;
        mount?: ((el: HTMLDivElement) => void) | undefined;
        unmount?: ((el?: HTMLDivElement) => void) | undefined;
    }[]>;
    customPagesPortals: import("vue").ComputedRef<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]>;
    addCustomPage: (params: AddCustomPagesParams) => void;
};
export {};
